import{_ as i,c as a,a as n,o as e}from"./app-CrDOs8BQ.js";const t={};function p(l,s){return e(),a("div",null,s[0]||(s[0]=[n(`<p>在 Node.js 中，<strong>流（Stream）是用于处理数据的抽象接口</strong>，可以在读取和写入数据时以逐块（chunk）的方式进行操作。流可以分为可读流和可写流两种类型。</p><p><strong>可读流（Readable Stream）</strong> 用于从数据源（比如文件、网络请求、标准输入等）<strong>读取</strong> 数据，可以以可控的方式一次读取一小块数据，而不是一次性读取整个文件或数据流。这样可以有效地节省内存，特别适用于处理大型数据。</p><p><strong>可写流（Writable Stream）</strong> 用于将数据 <strong>写入</strong> 目标位置（比如文件、网络响应、标准输出等），也是逐块写入的方式，可以分多次写入数据。</p><p>通过使用流，可以在数据处理过程中进行<strong>实时读取、实时写入</strong>，不需要等到准备好整个数据。</p><p><strong>管道（Pipe）</strong> 是一种 <strong>连接可读流和可写流</strong> 的机制。通过创建一个管道，可以将数据从一个可读流传输到一个可写流，从而实现数据的传输和转换。在管道中，数据会以流式的方式通过数据管道，直到全部数据被传输完毕。</p><p>管道可以通过<code>pipe()</code>方法来建立，<strong>将可读流作为参数传递给目标可写流</strong>，从而将数据从源流传输到目标流。</p><p>下面是一个使用管道的例子：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fs</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fs</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">创建可读流</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">readableStream</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createReadStream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">input.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">创建可写流</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">writableStream</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createWriteStream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">output.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">将可读流的数据通过管道传输到可写流</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">readableStream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pipe</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">writableStream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们通过<code>createReadStream</code>和<code>createWriteStream</code>分别创建了一个可读流<code>readableStream</code>和一个可写流<code>writableStream</code>。然后，我们通过<code>pipe()</code>方法将可读流的数据传输到可写流中，实现了数据的复制和传输。</p><p>通过使用流和管道，我们可以实现高效的数据处理和传输，特别适用于处理大型文件或网络请求。</p>`,10)]))}const k=i(t,[["render",p],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/NodeJs/v04wug3m/","title":"流(Stream)和管道(Pipe)的区别","lang":"zh-CN","frontmatter":{"title":"流(Stream)和管道(Pipe)的区别","createTime":"2025/03/15 14:12:39","permalink":"/NodeJs/v04wug3m/"},"headers":[],"readingTime":{"minutes":1.77,"words":531},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/NodeJs/11.流(Stream)和管道(Pipe)的区别.md"}');export{k as comp,r as data};
