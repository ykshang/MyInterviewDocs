import{_ as a,c as i,a as n,o as p}from"./app-CrDOs8BQ.js";const e={};function l(t,s){return p(),i("div",null,s[0]||(s[0]=[n(`<h2 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念"><span>一、概念</span></a></h2><p>闭包是指<strong>一个函数和其相关的引用环境的组合</strong>。简而言之，<strong>闭包是一个函数，它可以访问其词法作用域外部的变量，并且即使在其词法作用域外部执行，仍然可以保持对这些变量的引用</strong>。</p><h2 id="二、特点" tabindex="-1"><a class="header-anchor" href="#二、特点"><span>二、特点</span></a></h2><p>要理解闭包，首先需要理解 <strong>词法作用域</strong> 。词法作用域是指在代码编写时确定变量作用域的规则，而不是在运行时确定。</p><p><strong>外部函数可以通过<code>aplly()</code>、<code>bind()</code>、<code>call()</code>来改变普通函数内部上下文。</strong></p><ol><li><strong>return 语句</strong>：闭包利用了词法作用域的特性，将函数内部的变量引用传递给了函数外部，使得函数在外部执行时仍然可以访问到这些变量。</li><li><strong>私有作用域</strong>：闭包可以创建私有变量和函数，外部作用域无法直接访问闭包内部的变量和函数。</li><li><strong>持久访问</strong>：闭包还可以用于创建具有持久状态的函数，即使函数执行完成后，它仍然可以记住其词法作用域中的变量。只要函数再次调用，这些变量依然可以被再次访问。</li></ol><h2 id="三、优缺点" tabindex="-1"><a class="header-anchor" href="#三、优缺点"><span>三、优缺点</span></a></h2><p><mark>优点：</mark> 闭包可以封装私有变量和方法，选择性的对外暴露属性和方法，这样有利于独立封装一些功能或者变量，避免被污染。内部函数可以访问外部函数的变量和参数，在闭包函数被回收之前，我们可以一直访问和修改这些变量。</p><p><mark>缺点：</mark> 闭包会使得函数中的变量一直存活在内存中，可能会因为被引用的对象火属性无法被回收，导致内存占用过高，特别是在大规模使用闭包的情况下。</p><p>但是很明显闭包的 <strong>优点还是大于缺点</strong>。</p><h2 id="_4-案例" tabindex="-1"><a class="header-anchor" href="#_4-案例"><span>4. 案例</span></a></h2><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createCounter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">外层闭包</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">内层闭包</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">可以访问上一层的count，并一直保持引用</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">counter</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createCounter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">counter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">counter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const k=a(e,[["render",l],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/Javascript/2yw5v8jr/","title":"闭包","lang":"zh-CN","frontmatter":{"title":"闭包","createTime":"2025/03/12 12:54:13","permalink":"/Javascript/2yw5v8jr/"},"headers":[],"readingTime":{"minutes":1.87,"words":560},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/Javascript/1.基础知识/5.闭包.md"}');export{k as comp,c as data};
