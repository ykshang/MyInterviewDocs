import{_ as t,c as s,a as r,o as l}from"./app-CrDOs8BQ.js";const i={};function o(a,n){return l(),s("div",null,n[0]||(n[0]=[r('<h2 id="_1-用户输入-url" tabindex="-1"><a class="header-anchor" href="#_1-用户输入-url"><span>1. 用户输入 URL</span></a></h2><ul><li><strong>地址栏输入：</strong> 用户在浏览器的地址栏中输入一个 URL（如https://www.example.com）并按下回车键。</li><li><strong>自动补全：</strong> 浏览器可能会根据历史记录、书签等信息自动补全 URL。</li></ul><h2 id="_2-url-解析" tabindex="-1"><a class="header-anchor" href="#_2-url-解析"><span>2. URL 解析</span></a></h2><ul><li><strong>协议解析：</strong> 浏览器解析 URL 中的协议部分（如 https），确定使用的协议。</li><li><strong>域名解析：</strong> 浏览器解析 URL 中的域名部分（如www.example.com）。</li><li><strong>路径解析：</strong> 浏览器解析 URL 中的路径部分（如/path/to/resource）。</li><li><strong>查询参数解析：</strong> 浏览器解析 URL 中的查询参数部分（如?query=param）。</li><li><strong>片段标识符解析：</strong> 浏览器解析 URL 中的片段标识符部分（如#section）。</li></ul><h2 id="_3-dns-解析" tabindex="-1"><a class="header-anchor" href="#_3-dns-解析"><span>3. DNS 解析</span></a></h2><ul><li><strong>缓存检查：</strong> 浏览器首先检查本地 DNS 缓存中是否有该域名的 IP 地址。</li><li><strong>操作系统缓存检查：</strong> 如果本地缓存中没有，浏览器会向操作系统请求。</li><li><strong>DNS 服务器查询：</strong> 操作系统会检查自己的缓存，如果没有，则会向配置的 DNS 服务器发送请求。</li><li><strong>递归查询：</strong> DNS 服务器可能会进行递归查询，最终返回域名对应的 IP 地址。</li><li><strong>返回 IP 地址：</strong> DNS 解析完成后，返回域名对应的 IP 地址（如 93.184.216.34）。</li></ul><h2 id="_4-建立-tcp-连接" tabindex="-1"><a class="header-anchor" href="#_4-建立-tcp-连接"><span>4. 建立 TCP 连接</span></a></h2><ul><li><strong>三次握手：</strong> 浏览器使用传输控制协议（TCP）与服务器建立连接。这个过程称为三次握手： <ul><li><strong>SYN：</strong> 浏览器发送一个 SYN（同步）包到服务器，表示请求建立连接。</li><li><strong>SYN-ACK：</strong> 服务器回应一个 SYN-ACK（同步-确认）包，表示同意建立连接。</li><li><strong>ACK：</strong> 浏览器发送一个 ACK（确认）包，连接建立。</li></ul></li></ul><h2 id="_5-tls-握手-如果使用-https" tabindex="-1"><a class="header-anchor" href="#_5-tls-握手-如果使用-https"><span>5. TLS 握手（如果使用 HTTPS）</span></a></h2><ul><li><strong>客户端问候：</strong> 浏览器发送一个 ClientHello 消息，包含支持的加密算法、TLS 版本等信息。</li><li><strong>服务器问候：</strong> 服务器回应一个 ServerHello 消息，选择加密算法和 TLS 版本，并发送服务器证书。</li><li><strong>证书验证：</strong> 浏览器验证服务器证书的有效性和可信度。</li><li><strong>密钥交换：</strong> 浏览器和服务器交换密钥，生成会话密钥。</li><li><strong>完成握手：</strong> 双方使用会话密钥加密通信，完成 TLS 握手。</li></ul><h2 id="_6-发送-http-请求" tabindex="-1"><a class="header-anchor" href="#_6-发送-http-请求"><span>6. 发送 HTTP 请求</span></a></h2><ul><li><strong>请求构建：</strong> 浏览器构建一个 HTTP 请求，包含请求方法（如 GET、POST）、请求头（如 User-Agent、Accept）等信息。</li><li><strong>发送请求：</strong> 浏览器通过建立的 TCP 连接将 HTTP 请求发送到服务器。</li></ul><h2 id="_7-服务器处理请求" tabindex="-1"><a class="header-anchor" href="#_7-服务器处理请求"><span>7. 服务器处理请求</span></a></h2><ul><li><strong>请求接收：</strong> 服务器接收到 HTTP 请求后，解析请求头和请求体。</li><li><strong>路由处理：</strong> 服务器根据请求的 URL 路径和方法，将请求路由到相应的处理程序。</li><li><strong>生成响应：</strong> 处理程序生成响应内容，通常包括 HTML、CSS、JavaScript 等资源。</li><li><strong>发送响应：</strong> 服务器将生成的 HTTP 响应发送回浏览器。</li></ul><h2 id="_8-浏览器接收响应" tabindex="-1"><a class="header-anchor" href="#_8-浏览器接收响应"><span>8. 浏览器接收响应</span></a></h2><ul><li><strong>响应解析：</strong> 浏览器接收到 HTTP 响应后，解析响应头和响应体。</li><li><strong>状态码检查：</strong> 浏览器检查 HTTP 状态码（如 200、404、500）以确定请求是否成功。</li><li><strong>重定向处理：</strong> 如果状态码是 3xx，浏览器会根据响应头中的 Location 字段发起新的请求。</li></ul><h2 id="_9-渲染页面" tabindex="-1"><a class="header-anchor" href="#_9-渲染页面"><span>9. 渲染页面</span></a></h2><ul><li><p><strong>HTML 解析：</strong> 浏览器开始解析 HTML 文档，构建 DOM（文档对象模型）树。</p><ul><li><strong>Tokenization：</strong> 将 HTML 内容分解成一系列的 Token。</li><li><strong>Tree Construction：</strong> 将 Token 转换成 DOM 节点，并构建 DOM 树。</li></ul></li><li><p><strong>CSS 解析：</strong> 浏览器解析 CSS 文件，构建 CSSOM（CSS 对象模型）树。</p><ul><li><strong>CSS Tokenization：</strong> 将 CSS 内容分解成一系列的 Token。</li><li><strong>CSS Parsing：</strong> 将 Token 转换成 CSS 规则，并构建 CSSOM 树。</li></ul></li><li><p><strong>JavaScript 执行：</strong> 浏览器执行 JavaScript 代码，可能会修改 DOM 和 CSSOM。</p><ul><li><strong>下载和解析：</strong> 下载并解析 JavaScript 文件。</li><li><strong>执行：</strong> 执行 JavaScript 代码，可能会操作 DOM 和 CSSOM。</li></ul></li><li><p><strong>渲染树构建：</strong> 浏览器将 DOM 和 CSSOM 合并成渲染树。</p><ul><li><strong>Render Tree Construction：</strong> 将 DOM 和 CSSOM 合并，生成渲染树。</li></ul></li><li><p><strong>布局计算：</strong> 浏览器计算每个元素的布局信息（位置和大小）。</p><ul><li><strong>Layout：</strong> 计算每个节点的几何信息（位置和大小）。</li></ul></li><li><p><strong>绘制：</strong> 浏览器将渲染树的内容绘制到屏幕上。</p><ul><li><strong>Paint：</strong> 将每个节点绘制到屏幕上。</li></ul></li></ul><h2 id="_10-资源加载" tabindex="-1"><a class="header-anchor" href="#_10-资源加载"><span>10. 资源加载</span></a></h2><ul><li><p><strong>并行加载：</strong> 浏览器会并行加载 HTML 中引用的资源（如 CSS、JavaScript、图片）。</p><ul><li><strong>Preload：</strong> 解析并应用 CSS 文件。</li><li><strong>Preload：</strong> 下载并执行 JavaScript 文件。</li><li><strong>图片：</strong> 下载并显示图片。</li></ul></li><li><p><strong>阻塞与非阻塞：</strong> CSS 和 JavaScript 可能会阻塞渲染，浏览器会根据资源的优先级进行加载和执行。</p></li></ul><h2 id="_11-交互处理" tabindex="-1"><a class="header-anchor" href="#_11-交互处理"><span>11. 交互处理</span></a></h2><ul><li><p><strong>事件绑定：</strong> 浏览器为页面元素绑定事件处理程序。</p><ul><li><strong>Event Listeners：</strong> 为 DOM 元素绑定事件监听器。</li></ul></li><li><p><strong>用户交互：</strong> 用户可以与页面进行交互，浏览器会响应用户的操作（如点击、输入）。</p><ul><li><strong>HTML 解析</strong>： 处理用户事件（如点击、输入）。</li><li><strong>DOM Updates：</strong> 根据用户操作更新 DOM。</li></ul></li></ul><h2 id="_12-持续优化" tabindex="-1"><a class="header-anchor" href="#_12-持续优化"><span>12. 持续优化</span></a></h2><ul><li><strong>缓存：</strong> 浏览器会缓存静态资源，以便下次请求时加快加载速度。 <ul><li><strong>HTTP Cache</strong>： 缓存 HTTP 响应，以减少重复请求。</li></ul></li><li><strong>预加载与预取：</strong> 浏览器可能会预加载或预取资源，以优化用户体验。 <ul><li><strong>Preload</strong>： 提前加载关键资源。</li><li><strong>Prefetch：</strong> 提前加载可能需要的资源。</li></ul></li></ul>',24)]))}const e=t(i,[["render",o],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/WebBasic/692gug00/","title":"浏览器中输入 URL 到页面显示的全过程","lang":"zh-CN","frontmatter":{"title":"浏览器中输入 URL 到页面显示的全过程","createTime":"2025/03/15 13:21:27","permalink":"/WebBasic/692gug00/"},"headers":[],"readingTime":{"minutes":4.59,"words":1376},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/WebBasic/2.浏览器相关/4.浏览器中输入 URL 到页面显示的全过程.md"}');export{e as comp,h as data};
