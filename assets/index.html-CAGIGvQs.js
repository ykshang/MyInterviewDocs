import{_ as a,c as t,a as n,o}from"./app-CrDOs8BQ.js";const r={};function i(c,e){return o(),t("div",null,e[0]||(e[0]=[n('<p>Cache-Control 和 Expires 是用于设置强缓存的缓存策略。</p><h3 id="_1、cache-control" tabindex="-1"><a class="header-anchor" href="#_1、cache-control"><span>1、Cache-Control：</span></a></h3><p>Cache-Control 是一个用于指定缓存行为的响应头字段。它可以通过设置不同的指令来控制缓存的行为。</p><ul><li>max-age=：指定资源在缓存中的最大有效时间，单位为秒。例如，<code>Cache-Control: max-age=3600</code> 表示资源在缓存中有效一小时。</li><li>no-cache：表示每次请求都要与服务器进行验证，不能直接使用缓存。</li><li>no-store：表示不缓存任何请求或响应的内容。</li><li>public：表示响应可以被任何缓存（包括客户端和中间代理服务器）缓存。</li><li>private：表示响应只能被客户端缓存，中间代理服务器不应该缓存响应。</li></ul><p>这些指令可以单独使用或者组合使用，以定义缓存的行为。通过 Cache-Control，开发者可以灵活地控制缓存的有效期、缓存级别和缓存的访问权限。</p><h3 id="_2、expires" tabindex="-1"><a class="header-anchor" href="#_2、expires"><span>2、Expires</span></a></h3><p>Expires 是一个响应头字段，用于指定资源的过期时间，是一个具体的日期时间。浏览器在接收到带有 Expires 响应头的资源时，会将资源缓存在本地，并在过期时间之前直接使用缓存。</p><p>例如，<code>Expires: Wed, 21 Oct 2023 07:28:00 GMT</code> 表示资源在 2023 年 10 月 21 日 07:28:00 GMT 之前有效。</p><p>Cache-Control 是 HTTP/1.1 的标准字段，而 Expires 是 HTTP/1.0 的字段。Cache-Control 提供了更多的缓存控制选项，更为灵活，并且在功能上覆盖了 Expires 的功能。因此，在支持 HTTP/1.1 的情况下，建议优先使用 Cache-Control 来设置缓存策略。</p><p>同时，需要注意的是，如果同时使用了 Cache-Control 和 Expires，Cache-Control 的优先级更高。因为 Cache-Control 是比 Expires 更新的规范，并且提供了更多的缓存控制选项。</p>',10)]))}const l=a(r,[["render",i],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/WebBasic/4xy6qd54/","title":"8","lang":"zh-CN","frontmatter":{"title":8,"createTime":"2025/03/15 13:30:19","permalink":"/WebBasic/4xy6qd54/"},"headers":[],"readingTime":{"minutes":1.72,"words":515},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/WebBasic/2.浏览器相关/8.md"}');export{l as comp,p as data};
