import{_ as o,c as t,a,o as l}from"./app-CrDOs8BQ.js";const n={};function r(s,e){return l(),t("div",null,e[0]||(e[0]=[a("<p>优化 Webpack 的构建速度是一个常见的需求，下面是一些常见的优化策略：</p><ol><li><p><strong>文件排除 Include/Exclude：</strong> 使用<code>Include/Exclude</code>来排除掉不需要编译的目录和文件，限制 loader 的作用范围。</p></li><li><p><strong>开启多线程：</strong> 可以使用<code>thread-loader</code>，利用多进程加快构建，但是进程的启动也是有时间开销的，需要根据代码规模酌情考虑。</p></li><li><p><strong>利用缓存加速二次打包：</strong> 使用<code>cache</code>缓存<code>eslint</code>和<code>babel</code>的处理结果，加快二次打包的速度</p></li><li><p><strong>选择合适的 sourcemap 策略：</strong> 选择根据需求合适的生成策略来提高对应环境的构建速度。</p></li><li><p><strong>使用热重载 HMR：</strong> 开发环境可以开启热重载，提升开发体验</p></li><li><p><strong>使用 oneOf( )精准匹配：</strong> oneOf 的作用就是，存在多个 loader 情况下，只要匹配到一个 rule，其他的 rule 就不执行了。我们可以通过修改正则匹配的规则，更加精准的去匹配文件，尽量使用一条 rule 来 完成对匹配文件的处理。</p></li><li><p><strong>模块解析 resolve：</strong></p><ul><li>使用<code>resolve.alias</code>配置别名，加快模块的查找速度；</li><li>使用<code>‌resolve.extensions</code>指定扩展名、指定查找的文件类型；</li><li>使用<code>‌resolve.modules</code>指定搜索目录。</li></ul></li></ol>",2)]))}const i=o(n,[["render",r],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/Webpack/j0wvkvbw/","title":"如何提高 Webpack 的构建速度？","lang":"zh-CN","frontmatter":{"title":"如何提高 Webpack 的构建速度？","createTime":"2025/03/15 14:24:21","permalink":"/Webpack/j0wvkvbw/"},"headers":[],"readingTime":{"minutes":1.19,"words":358},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/Webpack/99.面试题/如何提高 Webpack 的构建速度？.md"}');export{i as comp,d as data};
