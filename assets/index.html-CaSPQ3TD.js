import{_ as i,c as a,a as n,o as e}from"./app-CrDOs8BQ.js";const t="/MyBlog/assets/20.1-BGrk80xf.png",l={};function p(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<p>Node.js 的事件循环（Event Loop）是其异步非阻塞 I/O 模型的核心，基于 <strong>libuv</strong> 库实现。它通过多阶段的任务调度机制，高效管理定时器、I/O 操作、网络请求等异步任务。以下是事件循环的详细运转流程：</p><h2 id="_1-事件循环的六个阶段" tabindex="-1"><a class="header-anchor" href="#_1-事件循环的六个阶段"><span>1. 事件循环的六个阶段</span></a></h2><p>事件循环按顺序执行六个阶段，每个阶段处理特定类型的任务队列，并在每个阶段完成后执行微任务（如 <code>process.nextTick</code> 和 <code>Promise</code>）。</p><h3 id="阶段-1-timers-定时器阶段" tabindex="-1"><a class="header-anchor" href="#阶段-1-timers-定时器阶段"><span>阶段 1：Timers（定时器阶段）</span></a></h3><ul><li><strong>任务类型</strong>：处理 <code>setTimeout</code> 和 <code>setInterval</code> 的回调。</li><li><strong>执行逻辑</strong>： <ul><li>检查定时器堆（Timer Heap）中是否有到期的定时器。</li><li>执行所有到期的定时器回调。</li><li><strong>注意</strong>：定时器的实际执行时间可能比设定的延迟更长（受事件循环状态影响）。</li></ul></li><li><strong>示例</strong>：<div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Timeout</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">若事件循环其他阶段耗时超过</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">100ms，回调可能延迟执行。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="阶段-2-pending-i-o-callbacks-挂起的-i-o-回调" tabindex="-1"><a class="header-anchor" href="#阶段-2-pending-i-o-callbacks-挂起的-i-o-回调"><span>阶段 2：Pending I/O Callbacks（挂起的 I/O 回调）</span></a></h3><ul><li><strong>任务类型</strong>：处理系统操作（如 TCP 错误、文件读写错误）的回调。</li><li><strong>执行逻辑</strong>： <ul><li>执行上一轮事件循环中未处理的 I/O 回调。</li><li>例如，如果 TCP 连接尝试失败，其错误回调会在此阶段执行。</li></ul></li><li><strong>示例</strong>：<div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">net</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">net</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">socket</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">net</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">connect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">invalid_port</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">socket</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">error</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Error</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">here!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;error&#39;</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">回调在此阶段执行。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="阶段-3-idle-prepare-闲置-准备阶段" tabindex="-1"><a class="header-anchor" href="#阶段-3-idle-prepare-闲置-准备阶段"><span>阶段 3：Idle/Prepare（闲置/准备阶段）</span></a></h3><ul><li><strong>任务类型</strong>：Node.js 内部使用的阶段，开发者通常无需关注。</li><li><strong>作用</strong>：为后续阶段准备资源或执行内部任务。</li></ul><h3 id="阶段-4-poll-轮询阶段" tabindex="-1"><a class="header-anchor" href="#阶段-4-poll-轮询阶段"><span><strong>阶段 4：<strong>Poll</strong>（轮询阶段）</strong></span></a></h3><ul><li><strong>核心阶段</strong>：处理 I/O 事件（如文件读写、网络请求）的回调。</li><li><strong>执行逻辑</strong>： <ol><li><strong>处理 Poll 队列中的回调</strong>： <ul><li>执行所有已完成的 I/O 操作的回调（例如 <code>fs.readFile</code> 的回调）。</li><li>队列为空时，检查是否有 <code>setImmediate</code> 任务： <ul><li>如果有，进入 <strong>Check 阶段</strong>。</li><li>如果没有，检查是否有到期的定时器（Timers 阶段）。</li></ul></li></ul></li><li><strong>计算阻塞时间</strong>： <ul><li>如果队列为空且无 <code>setImmediate</code>，事件循环会阻塞等待新的 I/O 事件。</li><li>阻塞的最长时间由最近的定时器到期时间决定。</li></ul></li></ol></li><li><strong>示例</strong>：<div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">readFile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I/O</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">完成，回调在</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Poll</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">阶段执行</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="阶段-5-check-检查阶段" tabindex="-1"><a class="header-anchor" href="#阶段-5-check-检查阶段"><span>阶段 5：Check（检查阶段）</span></a></h3><ul><li><strong>任务类型</strong>：执行 <code>setImmediate</code> 的回调。</li><li><strong>执行逻辑</strong>： <ul><li>清空 <code>setImmediate</code> 队列中的所有回调。</li><li><strong>优先级</strong>：在 I/O 回调中，<code>setImmediate</code> 总是先于 <code>setTimeout(fn, 0)</code>。</li></ul></li><li><strong>示例</strong>：<div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Immediate</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">回调</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="阶段-6-close-callbacks-关闭回调阶段" tabindex="-1"><a class="header-anchor" href="#阶段-6-close-callbacks-关闭回调阶段"><span>阶段 6：Close Callbacks（关闭回调阶段）</span></a></h3><ul><li><strong>任务类型</strong>：处理关闭事件的回调（如 <code>socket.on(&#39;close&#39;)</code>）。</li><li><strong>示例</strong>：<div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">server</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">net</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createServer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">server</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">close</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Server</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">closed!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">server</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;close&#39;</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">回调在此阶段执行。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_2-微任务-microtasks-的执行时机" tabindex="-1"><a class="header-anchor" href="#_2-微任务-microtasks-的执行时机"><span>2. 微任务（Microtasks）的执行时机</span></a></h2><p>微任务在 <strong>每个阶段结束后立即执行</strong>，优先级高于下一阶段的宏任务。</p><h3 id="微任务类型" tabindex="-1"><a class="header-anchor" href="#微任务类型"><span>微任务类型：</span></a></h3><ol><li><strong><code>process.nextTick</code> 回调</strong>：优先级最高。</li><li><strong><code>Promise</code> 回调</strong>：优先级次于 <code>process.nextTick</code>。</li></ol><h3 id="执行规则" tabindex="-1"><a class="header-anchor" href="#执行规则"><span>执行规则：</span></a></h3><ul><li>每个阶段完成后，先清空 <code>process.nextTick</code> 队列，再清空 <code>Promise</code> 队列。</li><li>微任务执行期间新添加的微任务会被一并处理（可能导致饿死事件循环）。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Check</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">阶段</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">process</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nextTick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nextTick</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">在</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Check</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">阶段后</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出顺序：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Check</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">阶段</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">nextTick</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">在</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Check</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">阶段后</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-事件循环的完整运转流程" tabindex="-1"><a class="header-anchor" href="#_3-事件循环的完整运转流程"><span>3. 事件循环的完整运转流程</span></a></h2><ol><li><strong>启动事件循环</strong>：执行同步代码，初始化定时器、I/O 操作等。</li><li><strong>进入循环</strong>： <ul><li><strong>Timers 阶段</strong> → 处理到期的定时器。</li><li><strong>Pending I/O Callbacks</strong> → 处理系统级回调。</li><li><strong>Idle/Prepare</strong> → 内部任务。</li><li><strong>Poll 阶段</strong> → 处理 I/O 回调，可能阻塞等待新事件。</li><li><strong>Check 阶段</strong> → 处理 <code>setImmediate</code>。</li><li><strong>Close Callbacks</strong> → 处理关闭事件。</li></ul></li><li><strong>循环条件</strong>：如果仍有活跃的句柄（如定时器、TCP 连接），继续循环；否则退出。</li></ol><h2 id="_4-关键-api-的归属阶段" tabindex="-1"><a class="header-anchor" href="#_4-关键-api-的归属阶段"><span>4. 关键 API 的归属阶段</span></a></h2><table><thead><tr><th>API</th><th>所属阶段/类型</th><th>说明</th></tr></thead><tbody><tr><td><code>setTimeout</code></td><td>Timers 阶段</td><td>回调在 Timers 阶段执行，实际时间受事件循环状态影响。</td></tr><tr><td><code>setImmediate</code></td><td>Check 阶段</td><td>在 Check 阶段执行，优先级在 I/O 回调中高于 <code>setTimeout(fn, 0)</code>。</td></tr><tr><td><code>fs.readFile</code></td><td>Poll 阶段</td><td>I/O 完成后的回调在 Poll 阶段执行。</td></tr><tr><td><code>process.nextTick</code></td><td>微任务队列</td><td>当前阶段结束后立即执行，优先级最高。</td></tr><tr><td><code>Promise.then()</code></td><td>微任务队列</td><td>当前阶段结束后执行，优先级次于 <code>process.nextTick</code>。</td></tr><tr><td><code>server.on(&#39;close&#39;)</code></td><td>Close Callbacks</td><td>关闭事件回调在此阶段执行。</td></tr></tbody></table><h2 id="_5-执行顺序示例与解析" tabindex="-1"><a class="header-anchor" href="#_5-执行顺序示例与解析"><span>5. 执行顺序示例与解析</span></a></h2><h3 id="示例-1-顶层代码中的-settimeout-vs-setimmediate" tabindex="-1"><a class="header-anchor" href="#示例-1-顶层代码中的-settimeout-vs-setimmediate"><span>示例 1：顶层代码中的 <code>setTimeout</code> vs <code>setImmediate</code></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Timeout</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Immediate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出顺序可能随机：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">可能是</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Timeout</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Immediate，也可能是</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Immediate</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Timeout</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因</strong>：<br> 事件循环启动时，若准备时间超过 1ms，Timers 阶段的 <code>setTimeout</code> 已到期，先执行；否则进入 Check 阶段先执行 <code>setImmediate</code>。</p><h3 id="示例-2-i-o-回调中的确定顺序" tabindex="-1"><a class="header-anchor" href="#示例-2-i-o-回调中的确定顺序"><span>示例 2：I/O 回调中的确定顺序</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fs</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fs</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">readFile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Timeout</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Immediate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出顺序始终为：Immediate</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Timeout</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因</strong>：<br> I/O 回调在 Poll 阶段执行，之后会直接进入 Check 阶段处理 <code>setImmediate</code>，下一轮循环再处理 Timers 阶段的 <code>setTimeout</code>。</p><h2 id="_6-浏览器与-node-js-事件循环的区别" tabindex="-1"><a class="header-anchor" href="#_6-浏览器与-node-js-事件循环的区别"><span>6. 浏览器与 Node.js 事件循环的区别</span></a></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>浏览器事件循环</strong></th><th><strong>Node.js 事件循环</strong></th></tr></thead><tbody><tr><td><strong>阶段划分</strong></td><td>无明确阶段，分宏任务（如 <code>setTimeout</code>）和微任务</td><td>六个明确阶段</td></tr><tr><td><strong>微任务执行时机</strong></td><td>每个宏任务后执行</td><td>每个阶段结束后执行</td></tr><tr><td><code>setImmediate</code></td><td>不支持</td><td>在 Check 阶段执行</td></tr><tr><td><code>process.nextTick</code></td><td>不支持</td><td>微任务，优先级最高</td></tr><tr><td><strong>渲染时机</strong></td><td>在宏任务之间可能触发渲染</td><td>无渲染概念，专注于 I/O 和异步任务</td></tr></tbody></table><h2 id="_7-如何避免事件循环阻塞" tabindex="-1"><a class="header-anchor" href="#_7-如何避免事件循环阻塞"><span>7. 如何避免事件循环阻塞？</span></a></h2><ol><li><strong>分解 CPU 密集型任务</strong>：使用 <code>setImmediate</code> 或 <code>process.nextTick</code> 分段处理。<div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">heavyTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">分段处理</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hasMoreWork</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">heavyTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>优先使用异步 API</strong>：如 <code>fs.readFile</code> 而非 <code>fs.readFileSync</code>。</li><li><strong>监控事件循环延迟</strong>：使用工具（如 <code>loopbench</code>）检测阻塞。</li></ol><h2 id="_8-总结" tabindex="-1"><a class="header-anchor" href="#_8-总结"><span>8. 总结</span></a></h2><ul><li><strong>事件循环顺序</strong>：Timers → Pending I/O → Poll → Check → Close，循环执行。</li><li><strong>微任务优先级</strong>：<code>process.nextTick</code> &gt; <code>Promise</code>，在每个阶段结束后立即执行。</li><li><strong>设计目标</strong>：通过非阻塞 I/O 和高效的任务调度，支持高并发场景。</li><li><strong>实践要点</strong>：理解阶段归属、避免阻塞 Poll 阶段、利用微任务优化代码。</li></ul><p>掌握事件循环的机制，可以更精准地控制异步代码的执行顺序，优化性能并避免潜在问题（如回调饥饿或意外阻塞）。</p><p><img src="`+t+'" alt="在这里插入图片描述" width="1052" height="1285"></p>',42)]))}const d=i(l,[["render",p],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/NodeJs/4i088s4r/","title":"详细的描述一下事件循环","lang":"zh-CN","frontmatter":{"title":"详细的描述一下事件循环","createTime":"2025/03/15 14:12:39","permalink":"/NodeJs/4i088s4r/"},"headers":[],"readingTime":{"minutes":5.44,"words":1633},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/NodeJs/20.详细的描述一下事件循环.md"}');export{d as comp,r as data};
