import{_ as e,c as t,a as i,o as n}from"./app-CrDOs8BQ.js";const s={};function r(c,a){return n(),t("div",null,a[0]||(a[0]=[i('<div class="hint-container tip"><p class="hint-container-title">注意</p><p>需要注意的是，为了避免 this 的指向问题，可以使用 <code>bind()</code>、<code>call()</code>、<code>apply()</code>等方法<mark>显式调整</mark>函数的 this 的指向。另外，在 ES6 中，可以使用箭头函数来避免 this 指向问题。</p></div><h2 id="一、全局作用域中" tabindex="-1"><a class="header-anchor" href="#一、全局作用域中"><span>一、全局作用域中</span></a></h2><p>在全局作用域中，this 指向 <mark>全局对象</mark>。</p><ul><li>浏览器环境中是 <code>window</code> 对象</li><li>Node.js 环境中是 <code>global</code> 对象</li></ul><h2 id="二、普通函数中" tabindex="-1"><a class="header-anchor" href="#二、普通函数中"><span>二、普通函数中</span></a></h2><p>在函数中，this 的值取决于函数的运行环境：</p><ul><li>如果函数作为普通函数（<code>fun()</code>）调用（不是作为对象的方法或构造函数），this 指向<mark>全局对象</mark>（非严格模式）或 <mark>undefined</mark>（严格模式）。</li><li>如果函数作为对象的方法（<code>obj.fun()</code>）调用，this 指向<mark>该对象</mark>。</li><li>如果函数作为构造函数调用（通过 new 关键字<code>xxx = new Obj()</code>），this 指向由<mark>构造函数创建的实例</mark>。</li><li>如果函数使用 call()、apply()或 bind()方法改变内部值域，this 指向<mark>参数中的对象</mark>。</li></ul><h2 id="三、箭头函数中" tabindex="-1"><a class="header-anchor" href="#三、箭头函数中"><span>三、箭头函数中</span></a></h2><p>箭头函数没有自己的 this，它会 <mark>继承上下文</mark> 中的 this 值。这意味着在箭头函数中，this 指向定义时的外层作用域中的 this。</p>',9)]))}const d=e(s,[["render",r],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/Javascript/nxr20tzk/","title":"this 的指向","lang":"zh-CN","frontmatter":{"title":"this 的指向","createTime":"2025/03/12 17:19:50","permalink":"/Javascript/nxr20tzk/"},"headers":[],"readingTime":{"minutes":1.04,"words":313},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/Javascript/1.基础知识/14.this 的指向.md"}');export{d as comp,h as data};
