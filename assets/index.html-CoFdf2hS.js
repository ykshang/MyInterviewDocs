import{_ as i,c as a,a as n,o as e}from"./app-CrDOs8BQ.js";const t={};function l(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<p>在 Node.js 中，<code>setImmediate</code> 是一个用于调度回调函数在<strong>事件循环的 Check 阶段</strong>立即执行的 API。它与 <code>setTimeout</code> 类似，但执行时机和事件循环阶段的归属不同。以下是关于 <code>setImmediate</code> 的详细解析：</p><h2 id="一、定义与作用" tabindex="-1"><a class="header-anchor" href="#一、定义与作用"><span>一、定义与作用</span></a></h2><ul><li><strong>语法</strong>：<code>setImmediate(callback[, ...args])</code></li><li><strong>功能</strong>：将回调函数插入事件循环的 <strong>Check 阶段</strong>，在当前阶段（如 I/O 操作）完成后立即执行。</li><li><strong>特点</strong>： <ul><li>回调会在当前事件循环的 <strong>Check 阶段</strong> 执行。</li><li>适用于需要尽快执行但允许事件循环继续运行的场景。</li></ul></li></ul><hr><h2 id="二、执行阶段与优先级" tabindex="-1"><a class="header-anchor" href="#二、执行阶段与优先级"><span>二、执行阶段与优先级</span></a></h2><ul><li><strong>归属阶段</strong>：事件循环的 <strong>Check 阶段</strong>（第 5 个阶段）。</li><li><strong>与 <code>setTimeout</code> 对比</strong>： <table><thead><tr><th>API</th><th>所属阶段</th><th>触发条件</th><th>优先级</th></tr></thead><tbody><tr><td><code>setImmediate</code></td><td>Check 阶段</td><td>当前阶段完成后立即执行</td><td>在 <code>setTimeout(..., 0)</code> <strong>之后</strong></td></tr><tr><td><code>setTimeout(...,0)</code></td><td>Timers 阶段</td><td>定时器到期（即使延迟为 0）</td><td>在 <code>setImmediate</code> <strong>之前</strong></td></tr></tbody></table></li></ul><hr><h2 id="三、典型场景与示例" tabindex="-1"><a class="header-anchor" href="#三、典型场景与示例"><span>三、典型场景与示例</span></a></h2><h4 id="场景-1-在-i-o-回调中优先执行" tabindex="-1"><a class="header-anchor" href="#场景-1-在-i-o-回调中优先执行"><span>场景 1：在 I/O 回调中优先执行</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fs</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fs</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">readFile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Timeout</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Immediate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出顺序：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Immediate</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Timeout</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">解释：在</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">I/O</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">回调中，事件循环会先进入</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Check</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">阶段（执行</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">setImmediate），再进入下一轮循环的</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Timers</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">阶段。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="场景-2-顶层代码中的不确定性" tabindex="-1"><a class="header-anchor" href="#场景-2-顶层代码中的不确定性"><span>场景 2：顶层代码中的不确定性</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Timeout</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Immediate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出顺序可能随机：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">可能是</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Timeout</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Immediate，也可能是</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Immediate</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Timeout</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">原因：事件循环启动时间影响</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Timers</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">阶段的检查。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、为什么在-i-o-回调中-setimmediate-总是先于-settimeout" tabindex="-1"><a class="header-anchor" href="#四、为什么在-i-o-回调中-setimmediate-总是先于-settimeout"><span>四、为什么在 I/O 回调中 <code>setImmediate</code> 总是先于 <code>setTimeout</code>？</span></a></h2><ul><li><strong>事件循环流程</strong>： <ol><li>当 <code>fs.readFile</code> 完成时，回调被加入 <strong>Poll 阶段</strong> 的队列。</li><li>Poll 阶段执行回调，此时会先处理 <code>setImmediate</code>（进入 Check 阶段）。</li><li>Check 阶段完成后，进入下一轮循环的 <strong>Timers 阶段</strong>，执行 <code>setTimeout</code>。</li></ol></li><li><strong>关键点</strong>：I/O 回调在 Poll 阶段执行，而 <code>setImmediate</code> 的 Check 阶段是 Poll 阶段后的下一个阶段。</li></ul><hr><h2 id="五、setimmediate-与微任务的优先级" tabindex="-1"><a class="header-anchor" href="#五、setimmediate-与微任务的优先级"><span>五、<code>setImmediate</code> 与微任务的优先级</span></a></h2><ul><li><strong>微任务（<code>process.nextTick</code> 和 <code>Promise</code>）</strong> 在阶段切换时执行，优先级高于 <code>setImmediate</code>：</li></ul><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Immediate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">process</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nextTick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nextTick</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Promise</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">输出顺序：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">nextTick</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Promise</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">→</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Immediate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、使用场景" tabindex="-1"><a class="header-anchor" href="#六、使用场景"><span>六、使用场景</span></a></h2><ol><li><strong>延迟执行到事件循环的下一个 Check 阶段</strong><br> 适用于需要避免阻塞 I/O 回调的场景。</li><li><strong>替代 <code>setTimeout(fn, 0)</code></strong><br> 更高效（无需通过 Timers 阶段的堆检查）。</li><li><strong>控制任务顺序</strong><br> 确保某些操作在 I/O 完成后立即执行。</li></ol><hr><h2 id="七、常见误区" tabindex="-1"><a class="header-anchor" href="#七、常见误区"><span>七、常见误区</span></a></h2><ul><li><strong>误区 1</strong>：<code>setImmediate</code> 是“立即执行”。 <ul><li>事实：它是在 Check 阶段执行，而非“同步执行”。</li></ul></li><li><strong>误区 2</strong>：<code>setImmediate</code> 和 <code>setTimeout(fn, 0)</code> 完全等价。 <ul><li>事实：它们的执行阶段不同，顺序可能受事件循环状态影响。</li></ul></li></ul><hr><h2 id="八、总结" tabindex="-1"><a class="header-anchor" href="#八、总结"><span>八、总结</span></a></h2><ul><li><strong>核心机制</strong>：<code>setImmediate</code> 的回调在事件循环的 <strong>Check 阶段</strong> 执行。</li><li><strong>适用场景</strong>：需要尽快执行但允许事件循环继续运行的异步操作。</li><li><strong>执行顺序</strong>：在 I/O 回调中总是先于 <code>setTimeout(fn, 0)</code>，但在顶层代码中可能不确定。</li><li><strong>与微任务的区别</strong>：微任务（如 <code>process.nextTick</code>）的优先级更高。</li></ul><p>理解 <code>setImmediate</code> 的机制，能帮助你更精准地控制异步代码的执行顺序，优化性能。</p>`,29)]))}const k=i(t,[["render",l],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/NodeJs/jurs59wd/","title":"setImmediate 方法","lang":"zh-CN","frontmatter":{"title":"setImmediate 方法","createTime":"2025/03/15 14:12:39","permalink":"/NodeJs/jurs59wd/"},"headers":[],"readingTime":{"minutes":2.69,"words":806},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/NodeJs/21.setImmediate 方法.md"}');export{k as comp,d as data};
