import{_ as a,c as i,a as n,o as e}from"./app-CrDOs8BQ.js";const p={};function t(l,s){return e(),i("div",null,s[0]||(s[0]=[n(`<div class="hint-container tip"><p class="hint-container-title">总结</p><p><code>webpack</code> 会自动识别 <code>import()</code> 来做代码分割。只要在组件或者路由上确保使用 <code>import()</code> 来异步加载即可。</p></div><p>在 Webpack 中，我们可以通过按照路由拆分代码来优化应用程序的性能和加载速度。下面是实现这两个功能的一些步骤：</p><h3 id="_1、路由支持懒加载" tabindex="-1"><a class="header-anchor" href="#_1、路由支持懒加载"><span>1、路由支持懒加载</span></a></h3><p>需要我们在路由器（如 React Router、Vue Router 等）配置中使用 ES 模块的<code>import()</code>语法来导入路由对应的视图组件</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">About</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./About</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2、代码拆分、公共代码提取" tabindex="-1"><a class="header-anchor" href="#_2、代码拆分、公共代码提取"><span>2、代码拆分、公共代码提取</span></a></h3><p>我们可以配置<code>splitChunks</code>，可以配置最大体积，最大数量等配置来实现对代码的合理拆分。同时可以将将共享的代码块从应用程序代码中提取出来，以便更好地利用缓存，并减少重复加载的代码。</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">代码分割配置</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">splitChunks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chunks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">all</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">对所有模块都进行分割</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">其他内容用默认配置即可</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、避免文件名重复" tabindex="-1"><a class="header-anchor" href="#_3、避免文件名重复"><span>3、避免文件名重复</span></a></h3><ul><li>配置 Webpack 的<code>output.filename</code>选项为使用<code>[name].[chunkhash].js</code>的格式</li><li>同时我们可以使用魔法注释，给路由起个名字，来保证生成唯一的文件名。</li></ul>`,10)]))}const h=a(p,[["render",t],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/Webpack/fr68bszb/","title":"如何基于路由的按需加载来配置代码分割？","lang":"zh-CN","frontmatter":{"title":"如何基于路由的按需加载来配置代码分割？","createTime":"2025/03/15 14:24:21","permalink":"/Webpack/fr68bszb/"},"headers":[],"readingTime":{"minutes":1.13,"words":338},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/Webpack/99.面试题/如何基于路由的按需加载来配置代码分割？.md"}');export{h as comp,k as data};
