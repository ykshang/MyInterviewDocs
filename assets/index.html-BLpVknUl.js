import{_ as e,c as n,a as t,o as s}from"./app-CrDOs8BQ.js";const r={};function h(i,a){return s(),n("div",null,a[0]||(a[0]=[t('<p>浏览器内核的渲染流程可以简化为以下几个步骤：</p><h4 id="_1、解析-html" tabindex="-1"><a class="header-anchor" href="#_1、解析-html"><span>1、解析 HTML</span></a></h4><p>浏览器内核首先会分析和解析接收到的 HTML 文档。它将文档分解为 DOM（文档对象模型）树，表示文档的结构和标记。</p><h4 id="_2、构建渲染树" tabindex="-1"><a class="header-anchor" href="#_2、构建渲染树"><span>2、构建渲染树</span></a></h4><p>在构建渲染树过程中，浏览器内核将解析的 DOM 树和 CSS 样式表合并，生成渲染树（Render Tree）。渲染树只包含需要显示在页面上的可见元素，并考虑布局和样式信息。</p><h4 id="_3、布局-回流" tabindex="-1"><a class="header-anchor" href="#_3、布局-回流"><span>3、布局（回流）</span></a></h4><p>渲染树中的每个元素都具有其自己的几何信息，如位置、大小等。布局（也称为回流）是指根据渲染树的几何信息计算元素在屏幕上的确切位置。这个过程涉及到计算元素的大小、排列方式以及相互之间的关系。</p><h4 id="_4、绘制-重绘" tabindex="-1"><a class="header-anchor" href="#_4、绘制-重绘"><span>4、绘制（重绘）</span></a></h4><p>在布局完成后，浏览器内核将开始绘制网页的内容。它会遍历渲染树，并将每个元素转化为屏幕上的像素。绘制过程涉及绘制元素的外观、背景、边框等样式。</p><h4 id="_5、栅格化和合成" tabindex="-1"><a class="header-anchor" href="#_5、栅格化和合成"><span>5、栅格化和合成</span></a></h4><p>栅格化是将绘制的图像分割成小块（栅格），以便后续处理和渲染加速。浏览器内核会对这些栅格应用一些优化技术，如图像压缩和缓存等。然后，它将栅格组合成最终的页面图像，并呈现在屏幕上。</p>',11)]))}const c=e(r,[["render",h],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/WebBasic/a3pjr75u/","title":"浏览器的渲染过程","lang":"zh-CN","frontmatter":{"title":"浏览器的渲染过程","createTime":"2025/03/15 13:30:18","permalink":"/WebBasic/a3pjr75u/"},"headers":[],"readingTime":{"minutes":1.36,"words":408},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/WebBasic/2.浏览器相关/2.浏览器的渲染过程.md"}');export{c as comp,d as data};
