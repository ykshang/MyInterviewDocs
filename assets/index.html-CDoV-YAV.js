import{_ as e,c as i,a as s,o as t}from"./app-CrDOs8BQ.js";const n={};function a(l,o){return t(),i("div",null,o[0]||(o[0]=[s('<h2 id="_1-cookie" tabindex="-1"><a class="header-anchor" href="#_1-cookie"><span>1. Cookie</span></a></h2><p>‌<strong>Cookies 在网络上指的是一种由服务器发送到用户浏览器并保存在用户计算机上的小型文本文件</strong>‌。</p><p>这些文件由名称、值、域名、路径、过期时间等字段组成，主要用于识别用户身份、跟踪用户活动、保存用户设置等。‌</p><blockquote><p><strong>Cookies 的主要作用：</strong></p><ul><li>识别用户身份：通过 Cookies，服务器可以识别用户的身份，从而提供个性化的服务。例如，当用户登录一个网站后，服务器会发送一个包含会话 ID 的 Cookie 到用户的浏览器，之后每次用户请求该网站的页面时，都会带上这个 Cookie，以维持会话状态。</li><li>保存用户偏好：Cookies 可以保存用户的偏好设置，例如浏览器设置、语言选择等，以便在用户下次访问时自动应用这些设置。</li><li>跟踪用户行为：通过分析 Cookies 中的信息，网站可以了解用户的浏览习惯和偏好，从而优化用户体验和提供相关广告。</li></ul></blockquote><blockquote><p><strong>Cookies 的属性包括：</strong></p><ul><li>‌ 名称（Name）：标识 Cookie 的名称。</li><li>‌ 值（Value）：存储在 Cookie 中的具体数据。</li><li>‌ 域（Domain）：决定哪些网站可以访问该 Cookie。</li><li>‌ 路径（Path）：限定 Cookie 的作用范围。</li><li>‌ 过期时间（Expires）：决定 Cookie 的有效期。</li><li>‌ 安全标记（Secure）：指示 Cookie 是否通过加密的 HTTPS 连接传输。</li><li>‌HttpOnly（标记）：防止客户端脚本访问 Cookie。</li></ul></blockquote><p>Cookies 的使用场景非常广泛，例如在线购物、社交媒体、论坛等。通过 Cookies，网站可以提供更加个性化的服务和广告推送，提升用户体验和网站的运营效率。</p><h2 id="_2-session" tabindex="-1"><a class="header-anchor" href="#_2-session"><span>2. Session</span></a></h2><p>Session 在网络上指的是“会话控制”，是服务器为了保存用户状态而创建的一个特殊的对象 ‌。Session 存储于服务器端，服务器会为每个客户端创建一个唯一的 Session，用于存储信息，实现数据共享 ‌。</p><blockquote><p><strong>基本概念和作用</strong></p><p>Session 在网络应用中用于保存用户的状态信息。当用户在网站上浏览或进行操作时，服务器会创建一个 Session 对象来存储用户的相关信息。这样，即使用户关闭浏览器或重新打开，之前的状态信息仍然可以保留，直到用户注销或超时 ‌。</p></blockquote><blockquote><p><strong>存储形式和生命周期</strong></p><p>Session 类似于一个 Map，里面可以存放多个键值对，key 必须是字符串，value 可以是任意对象。每个客户端都有一个唯一的 Session 标识（如 JSESSIONID），服务器通过这个标识来管理和访问用户的 Session。Session 的创建和销毁由服务器控制，当用户注销或超过一定时间无活动时，Session 会被销毁 ‌。</p></blockquote><h2 id="_3-会话和会话管理" tabindex="-1"><a class="header-anchor" href="#_3-会话和会话管理"><span>3. 会话和会话管理</span></a></h2><p><strong>会话</strong>是指服务器和客户端之间的一系列交互过程，用于保持用户状态和跟踪用户在网站上的活动。</p><p><strong>会话管理</strong>是指服务器如何管理和维护与每个用户相关的会话信息。</p><p>虽然 Cookie 也可以用于存储用户信息，但 Cookie 存储在客户端，容量有限且不安全。Session 则存储在服务器端，可以存储更多的数据且安全性更高。使用 Session 可以实现更复杂的状态管理，特别是在处理大量数据和需要高安全性的应用中更为适用。</p><p><strong>使用 Cookie 实现会话管理：</strong></p><ol><li>服务器在客户端的浏览器中设置一个唯一的标识符（通常称为会话 ID）作为 Cookie 的值。</li><li>客户端的浏览器保存该 Cookie，并在每次向服务器发送请求时将该 Cookie 包含在请求头的 Cookie 字段中。</li><li>服务器通过读取 Cookie 中的会话 ID 来识别和关联客户端的会话信息。</li></ol><p><strong>使用 Session 实现会话管理：</strong></p><ol><li>客户端发送请求时，服务器为该用户创建一个唯一的会话 ID，并将会话 ID 保存在服务器端的某种数据存储中（如内存、数据库等）。</li><li>服务器将会话 ID 发送回客户端的浏览器，可以通过 Cookie 方式发放，也可以在 URL 中进行传递。</li><li>客户端的浏览器保存该会话 ID，并在后续的请求中将会话 ID 包含在请求中（Cookie 方式或 URL 参数方式）。</li><li>服务器通过读取请求中的会话 ID 来关联客户端的会话信息。</li></ol><p>无论是使用 Cookie 还是 Session，它们都用于维护和跟踪用户的会话状态。Cookie 是在客户端存储的，相对便于实现和操作，并且可以设置过期时间。Session 是在服务器端存储的，可以存储更多的信息，对客户端不可见，但服务器需要进行存储和管理。</p><p>在实际应用中，可根据需求和安全性来选择使用 Cookie 还是 Session，或者结合两者进行会话管理。</p><h2 id="四、session-和-cookie-的区别" tabindex="-1"><a class="header-anchor" href="#四、session-和-cookie-的区别"><span>四、session 和 cookie 的区别</span></a></h2><p>cookie 和 session 的区别主要有如下几点：</p><table><thead><tr><th></th><th>cookie</th><th>session</th></tr></thead><tbody><tr><td>存放位置</td><td>浏览器端</td><td>服务端</td></tr><tr><td>安全性</td><td>以<strong>明文</strong>的方式存放在客户端的，安全性相对较低</td><td>存放于服务器中，所以安全性相对较好</td></tr><tr><td>网络传输</td><td>设置内容过多会增大报文体积， 会影响传输效率</td><td>数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</td></tr><tr><td>存储限制</td><td>浏览器限制单个 cookie 保存的数据不能超过 <code>4KB</code> ，且单个域名下的存储数量也有限制 (165 个)</td><td>session 数据存储在服务器中，所以没有这些限制</td></tr></tbody></table>',23)]))}const k=e(n,[["render",a],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/Network/i3u7iq8d/","title":"会话 Cookie 和 Session","lang":"zh-CN","frontmatter":{"title":"会话 Cookie 和 Session","createTime":"2025/03/15 12:57:39","permalink":"/Network/i3u7iq8d/"},"headers":[],"readingTime":{"minutes":4.96,"words":1489},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/Network/3.会话 Cookie 和 Session.md"}');export{k as comp,d as data};
