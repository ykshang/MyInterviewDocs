import{_ as i,c as a,a as e,o as n}from"./app-CrDOs8BQ.js";const l={};function t(p,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p>Node.js 的事件循环（Event Loop）是其异步非阻塞 I/O 操作的核心机制。它允许 Node.js 高效处理大量并发操作，而无需依赖多线程。以下是 Node.js 事件循环机制的详细说明：</p><h2 id="一、基本概念" tabindex="-1"><a class="header-anchor" href="#一、基本概念"><span>一、基本概念</span></a></h2><p>事件循环是一个持续运行的循环，负责处理<mark>异步任务</mark>的调度和执行。它从事件队列中取出任务，并将其推送到调用栈中执行。事件循环的核心是<mark>单线程</mark>，但通过异步 I/O 和非阻塞操作，Node.js 能够高效处理并发请求。</p><h2 id="二、运行阶段" tabindex="-1"><a class="header-anchor" href="#二、运行阶段"><span>二、运行阶段</span></a></h2><p>Node.js 的事件循环分为多个阶段，每个阶段都有特定的任务队列。以下是事件循环的主要阶段：</p><h4 id="_1、timers-阶段" tabindex="-1"><a class="header-anchor" href="#_1、timers-阶段"><span>1、Timers 阶段</span></a></h4><ul><li>处理 <code>setTimeout</code> 和 <code>setInterval</code> 的回调。</li><li>检查定时器是否到期，到期则执行回调。</li></ul><h4 id="_2、pending-callbacks-阶段" tabindex="-1"><a class="header-anchor" href="#_2、pending-callbacks-阶段"><span>2、Pending Callbacks 阶段</span></a></h4><ul><li>执行一些系统操作的回调，例如 TCP 错误回调。</li></ul><h4 id="_3、idle-阶段" tabindex="-1"><a class="header-anchor" href="#_3、idle-阶段"><span>3、Idle 阶段</span></a></h4><ul><li>内部使用的阶段，通常不需要关注。</li></ul><h4 id="_4、prepare-阶段" tabindex="-1"><a class="header-anchor" href="#_4、prepare-阶段"><span>4、Prepare 阶段</span></a></h4><ul><li>内部使用的阶段，通常不需要关注。</li></ul><h4 id="_5、poll-阶段" tabindex="-1"><a class="header-anchor" href="#_5、poll-阶段"><span>5、Poll 阶段</span></a></h4><ul><li>检索新的 I/O 事件（如文件读取、网络请求等）。</li><li>执行与 I/O 相关的回调。</li><li>如果 Poll 队列为空： <ul><li>如果队列为空，检查是否有 <code>setImmediate</code> 回调： <ul><li>有：进入 <strong>Check 阶段</strong>。</li><li>无：等待新的 I/O 事件，阻塞时间由最近的定时器到期时间决定</li></ul></li></ul></li></ul><h4 id="_6、check-阶段" tabindex="-1"><a class="header-anchor" href="#_6、check-阶段"><span>6、Check 阶段</span></a></h4><ul><li>执行 <code>setImmediate</code> 的回调。</li></ul><h4 id="_7、close-callbacks-阶段" tabindex="-1"><a class="header-anchor" href="#_7、close-callbacks-阶段"><span>7、Close Callbacks 阶段</span></a></h4><ul><li>执行一些关闭事件的回调，例如 <code>socket.on(&#39;close&#39;, ...)</code>。</li></ul><div class="hint-container tip"><p class="hint-container-title">执行顺序</p><ol><li>执行同步代码。</li><li>将异步任务（如 <code>setTimeout</code>、<code>setImmediate</code>、I/O 操作）分配到对应队列。</li><li>事件循环按照阶段顺序处理任务： <ul><li>Timers → Pending Callbacks → Poll → Check → Close Callbacks。</li></ul></li><li>每个阶段执行完毕后，事件循环会检查是否有新的任务，如果有则继续循环。</li></ol></div><h2 id="三、关键-api-的归属阶段" tabindex="-1"><a class="header-anchor" href="#三、关键-api-的归属阶段"><span>三、关键 API 的归属阶段</span></a></h2><table><thead><tr><th style="text-align:left;">API</th><th style="text-align:left;">阶段/类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>setTimeout</code></td><td style="text-align:left;">Timers 阶段</td><td style="text-align:left;">回调在 Timers 阶段执行。</td></tr><tr><td style="text-align:left;"><code>setImmediate</code></td><td style="text-align:left;">Check 阶段</td><td style="text-align:left;">回调在 Check 阶段执行。</td></tr><tr><td style="text-align:left;"><code>fs.readFile</code></td><td style="text-align:left;">Poll 阶段</td><td style="text-align:left;">I/O 完成后回调加入 Poll 队列。</td></tr><tr><td style="text-align:left;"><code>process.nextTick</code></td><td style="text-align:left;">微任务队列</td><td style="text-align:left;">当前阶段结束后立即执行。</td></tr><tr><td style="text-align:left;"><code>Promise.then()</code></td><td style="text-align:left;">微任务队列</td><td style="text-align:left;">优先级次于 <code>process.nextTick</code>。</td></tr></tbody></table><h2 id="四、微任务-microtasks-和宏任务-macrotasks" tabindex="-1"><a class="header-anchor" href="#四、微任务-microtasks-和宏任务-macrotasks"><span>四、微任务（Microtasks）和宏任务（Macrotasks）</span></a></h2><ul><li><strong>微任务</strong>：包括 <code>Promise</code> 的回调、<code>process.nextTick</code>。 <ul><li>微任务在当前阶段结束后、下一个阶段开始前执行。在 <strong>每个阶段切换时</strong>（即每个宏任务阶段完成后），会清空微任务队列。</li><li><code>process.nextTick</code> 的优先级高于 <code>Promise</code>。</li></ul></li><li><strong>宏任务</strong>：包括 <code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、I/O 操作。 <ul><li>宏任务在事件循环的各个阶段中执行。</li></ul></li></ul><h2 id="五、示例代码" tabindex="-1"><a class="header-anchor" href="#五、示例代码"><span>五、示例代码</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Start</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Timeout</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setImmediate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Immediate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Promise</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">process</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nextTick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Next</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Tick</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">End</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出顺序</strong>：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>Start</span></span>
<span class="line"><span>End</span></span>
<span class="line"><span>Next</span><span class="space"> </span><span>Tick</span></span>
<span class="line"><span>Promise</span></span>
<span class="line"><span>Timeout</span></span>
<span class="line"><span>Immediate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结"><span>六、总结</span></a></h2><ul><li>Node.js 的事件循环是单线程的，但通过异步和非阻塞 I/O 实现高并发。</li><li>事件循环分为多个阶段，每个阶段处理不同类型的任务。</li><li>微任务（如 <code>Promise</code>、<code>process.nextTick</code>）优先于宏任务（如 <code>setTimeout</code>、<code>setImmediate</code>）执行。</li></ul><p>理解事件循环机制对于编写高效的 Node.js 代码至关重要，尤其是在处理异步操作时。</p>`,31)]))}const d=i(l,[["render",t],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/NodeJs/iwswkhp4/","title":"事件循环","lang":"zh-CN","frontmatter":{"title":"事件循环","createTime":"2025/03/15 14:12:39","permalink":"/NodeJs/iwswkhp4/"},"headers":[],"readingTime":{"minutes":2.73,"words":820},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/NodeJs/19.事件循环.md"}');export{d as comp,k as data};
