import{_ as a,c as s,a as n,o}from"./app-CrDOs8BQ.js";const t={};function r(c,e){return o(),s("div",null,e[0]||(e[0]=[n('<p><strong>Webpack 的 Resolve 模块解析是用于解析模块路径的配置选项。它可以帮助 Webpack 正确地确定模块的位置。</strong></p><h3 id="_1、resolve-modules-用于指定模块的搜索路径。" tabindex="-1"><a class="header-anchor" href="#_1、resolve-modules-用于指定模块的搜索路径。"><span>1、<code>resolve.modules</code>：用于指定模块的搜索路径。</span></a></h3><p>当 Webpack 在解析导入语句时，它会按照指定的顺序依次查找这些路径来确定模块的位置。默认情况下，Webpack 会在当前工作目录和 node_modules 文件夹中查找。</p><h3 id="_2、resolve-alias-用于创建模块的路径别名。" tabindex="-1"><a class="header-anchor" href="#_2、resolve-alias-用于创建模块的路径别名。"><span>2、<code>resolve.alias</code>：用于创建模块的路径别名。</span></a></h3><p>通过配置别名，可以让 Webpack 在导入模块时使用更简短的路径。这对于减少代码中的冗余路径非常有用。</p><h3 id="_3、resolve-extensions-用于指定可以省略的文件扩展名。" tabindex="-1"><a class="header-anchor" href="#_3、resolve-extensions-用于指定可以省略的文件扩展名。"><span>3、<code>resolve.extensions</code>：用于指定可以省略的文件扩展名。</span></a></h3><p>当导入模块时没有指定文件扩展名时，Webpack 会按照指定的顺序依次尝试添加扩展名来解析模块。这样可以让我们在导入模块时省略掉繁琐的扩展名，提高开发效率。</p><p>通过合理配置这些选项，我们可以让 Webpack 更快地找到模块的位置，并且在导入模块时更加方便简洁。</p>',8)]))}const l=a(t,[["render",r],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/Webpack/zikp3yie/","title":"什么是模块解析（Resolve）","lang":"zh-CN","frontmatter":{"title":"什么是模块解析（Resolve）","createTime":"2025/03/15 14:24:21","permalink":"/Webpack/zikp3yie/"},"headers":[],"readingTime":{"minutes":1,"words":300},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/Webpack/99.面试题/什么是模块解析（Resolve）.md"}');export{l as comp,p as data};
