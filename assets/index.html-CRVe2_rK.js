import{_ as l,c as o,a,o as i}from"./app-CrDOs8BQ.js";const p={};function n(c,e){return i(),o("div",null,e[0]||(e[0]=[a('<p>对于 Webpack 的性能优化，以下是一些方面需要注意并采取最佳实践的建议：</p><h2 id="_1-减小文件体积" tabindex="-1"><a class="header-anchor" href="#_1-减小文件体积"><span>1. 减小文件体积</span></a></h2><ul><li><p><strong>代码拆分策略：</strong> 通过代码拆分，设置一定的参数，控制生成的文件符合一定的体积和数量</p></li><li><p><strong>代码压缩：</strong> 配置 CSS 代码压缩，js 和 html 是默认压缩的。</p></li><li><p><strong>Tree Shaking：</strong> 我们可以在开发过程中尽量使用按需导入的方式，来告诉 webpack 哪些代码可以被剔除。</p></li><li><p><strong>静态资源压缩优化：</strong></p><ul><li><p>使用<code>loader</code>将图片、字体等静态资源进行压缩和优化</p></li><li><p>图标，建议尽量使用字体库实现。</p></li><li><p>和样式相关的图片，我们建议将其合并处理为一张图片，通过 css 去控制偏移量展示。</p></li></ul></li><li><p><strong>公共代码抽离 runtime：</strong> 使用 <code>@babel/plugin-transform-runtime</code> 插件对 babel 进行处理，让辅助代码（公共组件）从中引入，而不是每个文件都生成辅助代码，从而体积更小。</p></li></ul><h2 id="_2-加快构建速度" tabindex="-1"><a class="header-anchor" href="#_2-加快构建速度"><span>2. 加快构建速度</span></a></h2><ul><li><p><strong>文件排除 Include/Exclude：</strong> 使用<code>Include/Exclude</code>来排除掉不需要编译的目录和文件，限制 loader 的作用范围。</p></li><li><p><strong>多线程：</strong> 可以使用<code>thread-loader</code>，利用多进程加快构建速度，但是进程的启动也是有时间开销的，需要根据代码规模酌情考虑。</p></li><li><p><strong>缓存策略：</strong> 使用<code>cache</code>缓存<code>eslint</code>和<code>babel</code>的处理结果，加快二次打包的速度</p></li><li><p><strong>sourcemap 策略：</strong> 选择根据需求合适的生成策略来提高对应环境的构建速度。</p></li><li><p><strong>热重载 HMR：</strong> 让开发时增量编译代码，未发生修改的代码使用缓存，从而使更新速度更快。</p></li><li><p><strong>oneOf( )：</strong> 使用该方法，可以实现在匹配时候仅命中和执行一个 rule，不再继续执行其他规则的匹配。我们可以通过修改正则匹配的规则，更加精准的去匹配文件，尽量使用一条 rule 来完成对匹配文件的处理。</p></li><li><p><strong>模块解析 resolve：</strong></p><ul><li><p>使用<code>resolve.alias</code>配置别名，加快模块的查找速度；</p></li><li><p>使用<code>‌resolve.extensions</code>指定扩展名、指定查找的文件类型；</p></li><li><p>使用<code>‌resolve.modules</code>指定搜索目录。</p></li></ul></li></ul><h2 id="_3-优化打包输出" tabindex="-1"><a class="header-anchor" href="#_3-优化打包输出"><span>3. 优化打包输出</span></a></h2><ul><li><p>配置<code>output.filename</code>和<code>output.chunkFilename</code>使用较短的文件名、hash 值等。</p></li><li><p>使用 Webpack 的<code>optimization.splitChunks</code>来提取和共享共同的代码块，避免重复加载的代码。</p></li><li><p>为要提取的代码块设置合适的缓存策略，通过配置<code>optimization.runtimeChunk</code>选项来为包含运行时代码的块设置不同的缓存策略。</p></li><li><p>js 和 css 文件的抽离</p></li><li><p>使用 preload 和 prefetch 技术</p></li></ul><h2 id="_4-优化代码运行性能" tabindex="-1"><a class="header-anchor" href="#_4-优化代码运行性能"><span>4. 优化代码运行性能</span></a></h2><ul><li><p>使用 <code>Code Split</code> 对代码进行分割成多个 js 文件，从而通过控制文件的数量和体积，提升 js 的并行加载速度。</p></li><li><p>使用 <code>import</code> 动态导入语法进行按需加载，从而达到需要使用时才加载该资源，不用时不加载资源。</p></li><li><p>使用 <code>Preload / Prefetch</code> 对代码进行提前加载，等未来需要使用时就能直接使用，从而用户体验更好。</p></li><li><p>使用 <code>Network Cache</code> 能对输出资源文件进行更好的命名，将来好做缓存，从而用户体验更好。</p></li><li><p>使用 <code>Core-js</code> 对 js 进行兼容性处理，让我们代码能运行在低版本浏览器。</p></li><li><p>使用 <code>PWA</code> 能让代码离线也能访问，从而提升用户体验。</p></li></ul><h3 id="_5-其他优化建议" tabindex="-1"><a class="header-anchor" href="#_5-其他优化建议"><span>5. 其他优化建议</span></a></h3><ul><li><p>按照工作需求分别配置开发环境和生产环境，在提升构建速度，代码运行速度同时，提升开发体验、运行体验。</p></li><li><p>使用<code>Webpack Bundle Analyzer</code>工具来分析和可视化打包后的代码结构，找出优化的潜力。</p></li><li><p>使用<code>Webpack Dev Server</code>来提供开发服务器，提供快速的热更新和热替换能力。</p></li></ul><p>通过遵循以上最佳实践，你可以优化 Webpack 的性能，提高构建速度和应用程序的加载速度。</p>',12)]))}const s=l(p,[["render",n],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/Webpack/98ejm3gb/","title":"有哪些 webpack 优化的建议？","lang":"zh-CN","frontmatter":{"title":"有哪些 webpack 优化的建议？","createTime":"2025/03/15 14:24:21","permalink":"/Webpack/98ejm3gb/"},"headers":[],"readingTime":{"minutes":3.43,"words":1030},"git":{"updatedTime":1742050940000,"contributors":[{"name":"kangkang shang","username":"kangkang shang","email":"535634238@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/kangkang shang?v=4","url":"https://github.com/kangkang shang"}]},"filePathRelative":"notes/Webpack/99.面试题/有哪些 webpack 优化的建议？.md"}');export{s as comp,r as data};
